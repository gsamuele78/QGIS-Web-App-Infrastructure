server {
    listen 80;
    server_name yourdomain.com; # Replace with your actual domain

    # Redirect HTTP to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name yourdomain.com; # Replace with your actual domain

    # SSL Configuration (Using Let's Encrypt by default)
    ssl_certificate /etc/ssl/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/ssl/letsencrypt/live/yourdomain.com/privkey.pem;

    # Option: Fallback to self-signed if Let's Encrypt is not available
    # ssl_certificate /etc/ssl/self-signed/yourdomain.com.crt;
    # ssl_certificate_key /etc/ssl/self-signed/yourdomain.com.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Add HSTS header (Optional)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Reverse Proxy for QWC Admin
    location /admin {
        proxy_pass http://qwc_admin:5031;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Handle websockets (if needed)
        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection "upgrade";
    }

    # Reverse Proxy for QWC Auth
    location /auth {
        proxy_pass http://qwc_auth:5011;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Reverse Proxy for QWC Service configuration
    location /config {
        proxy_pass http://qwc_service_config:5031/config;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Reverse Proxy for QGIS Desktop via noVNC
    location /qgis {
        proxy_pass http://qgis_desktop:5800;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;

        # Authentication (redirect to QWC Auth)
        auth_request /auth_qgis;
        error_page 401 = /login;
    }

    # Internal location for QGIS authentication check
    location = /auth_qgis {
        internal;
        proxy_pass http://qwc_auth:5011/auth/qgis;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Login Page (Redirect to QWC Auth)
    location = /login {
        return 302 https://$host/auth/login?url=$request_uri;
    }

    # Reverse Proxy for Filebrowser
    location /filebrowser {
        proxy_pass http://filebrowser:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Authentication (redirect to QWC Auth)
        auth_request /auth_filebrowser;
        error_page 401 = /login;
    }

    # Internal location for Filebrowser authentication check
    location = /auth_filebrowser {
        internal;
        proxy_pass http://qwc_auth:5011/auth/filebrowser;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Status Page (served by Nginx)
    location /status {
        alias /usr/share/nginx/html/status/;
        # Optional: Restrict access to admin IP or use basic authentication
        # allow your_admin_ip;
        # deny all;
        # auth_basic "Admin Area";
        # auth_basic_user_file /etc/nginx/.htpasswd;
    }

    # Other static content (if needed)
    # location / {
    #     root /var/www/html;
    #     index index.html index.htm;
    # }
}
